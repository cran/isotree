// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// deserialize_IsoForest
SEXP deserialize_IsoForest(Rcpp::RawVector src);
RcppExport SEXP _isotree_deserialize_IsoForest(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(deserialize_IsoForest(src));
    return rcpp_result_gen;
END_RCPP
}
// deserialize_ExtIsoForest
SEXP deserialize_ExtIsoForest(Rcpp::RawVector src);
RcppExport SEXP _isotree_deserialize_ExtIsoForest(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(deserialize_ExtIsoForest(src));
    return rcpp_result_gen;
END_RCPP
}
// deserialize_Imputer
SEXP deserialize_Imputer(Rcpp::RawVector src);
RcppExport SEXP _isotree_deserialize_Imputer(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(deserialize_Imputer(src));
    return rcpp_result_gen;
END_RCPP
}
// deserialize_Indexer
SEXP deserialize_Indexer(Rcpp::RawVector src);
RcppExport SEXP _isotree_deserialize_Indexer(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(deserialize_Indexer(src));
    return rcpp_result_gen;
END_RCPP
}
// check_null_ptr_model
Rcpp::LogicalVector check_null_ptr_model(SEXP ptr_model);
RcppExport SEXP _isotree_check_null_ptr_model(SEXP ptr_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr_model(ptr_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(check_null_ptr_model(ptr_model));
    return rcpp_result_gen;
END_RCPP
}
// fit_model
Rcpp::List fit_model(Rcpp::NumericVector X_num, Rcpp::IntegerVector X_cat, Rcpp::IntegerVector ncat, Rcpp::NumericVector Xc, Rcpp::IntegerVector Xc_ind, Rcpp::IntegerVector Xc_indptr, Rcpp::NumericVector sample_weights, Rcpp::NumericVector col_weights, size_t nrows, size_t ncols_numeric, size_t ncols_categ, size_t ndim, size_t ntry, Rcpp::CharacterVector coef_type, bool coef_by_prop, bool with_replacement, bool weight_as_sample, size_t sample_size, size_t ntrees, size_t max_depth, size_t ncols_per_tree, bool limit_depth, bool penalize_range, bool standardize_data, Rcpp::CharacterVector scoring_metric, bool fast_bratio, bool calc_dist, bool standardize_dist, bool sq_dist, bool calc_depth, bool standardize_depth, bool weigh_by_kurt, double prob_pick_by_gain_pl, double prob_pick_by_gain_avg, double prob_pick_by_full_gain, double prob_pick_by_dens, double prob_pick_col_by_range, double prob_pick_col_by_var, double prob_pick_col_by_kurt, double min_gain, Rcpp::CharacterVector cat_split_type, Rcpp::CharacterVector new_cat_action, Rcpp::CharacterVector missing_action, bool all_perm, bool build_imputer, bool output_imputations, size_t min_imp_obs, Rcpp::CharacterVector depth_imp, Rcpp::CharacterVector weigh_imp_rows, int random_seed, bool use_long_double, int nthreads);
RcppExport SEXP _isotree_fit_model(SEXP X_numSEXP, SEXP X_catSEXP, SEXP ncatSEXP, SEXP XcSEXP, SEXP Xc_indSEXP, SEXP Xc_indptrSEXP, SEXP sample_weightsSEXP, SEXP col_weightsSEXP, SEXP nrowsSEXP, SEXP ncols_numericSEXP, SEXP ncols_categSEXP, SEXP ndimSEXP, SEXP ntrySEXP, SEXP coef_typeSEXP, SEXP coef_by_propSEXP, SEXP with_replacementSEXP, SEXP weight_as_sampleSEXP, SEXP sample_sizeSEXP, SEXP ntreesSEXP, SEXP max_depthSEXP, SEXP ncols_per_treeSEXP, SEXP limit_depthSEXP, SEXP penalize_rangeSEXP, SEXP standardize_dataSEXP, SEXP scoring_metricSEXP, SEXP fast_bratioSEXP, SEXP calc_distSEXP, SEXP standardize_distSEXP, SEXP sq_distSEXP, SEXP calc_depthSEXP, SEXP standardize_depthSEXP, SEXP weigh_by_kurtSEXP, SEXP prob_pick_by_gain_plSEXP, SEXP prob_pick_by_gain_avgSEXP, SEXP prob_pick_by_full_gainSEXP, SEXP prob_pick_by_densSEXP, SEXP prob_pick_col_by_rangeSEXP, SEXP prob_pick_col_by_varSEXP, SEXP prob_pick_col_by_kurtSEXP, SEXP min_gainSEXP, SEXP cat_split_typeSEXP, SEXP new_cat_actionSEXP, SEXP missing_actionSEXP, SEXP all_permSEXP, SEXP build_imputerSEXP, SEXP output_imputationsSEXP, SEXP min_imp_obsSEXP, SEXP depth_impSEXP, SEXP weigh_imp_rowsSEXP, SEXP random_seedSEXP, SEXP use_long_doubleSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_num(X_numSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_cat(X_catSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind(Xc_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr(Xc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sample_weights(sample_weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type col_weights(col_weightsSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncols_numeric(ncols_numericSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncols_categ(ncols_categSEXP);
    Rcpp::traits::input_parameter< size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< size_t >::type ntry(ntrySEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type coef_type(coef_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type coef_by_prop(coef_by_propSEXP);
    Rcpp::traits::input_parameter< bool >::type with_replacement(with_replacementSEXP);
    Rcpp::traits::input_parameter< bool >::type weight_as_sample(weight_as_sampleSEXP);
    Rcpp::traits::input_parameter< size_t >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type ntrees(ntreesSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncols_per_tree(ncols_per_treeSEXP);
    Rcpp::traits::input_parameter< bool >::type limit_depth(limit_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type penalize_range(penalize_rangeSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize_data(standardize_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type scoring_metric(scoring_metricSEXP);
    Rcpp::traits::input_parameter< bool >::type fast_bratio(fast_bratioSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_dist(calc_distSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize_dist(standardize_distSEXP);
    Rcpp::traits::input_parameter< bool >::type sq_dist(sq_distSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_depth(calc_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize_depth(standardize_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type weigh_by_kurt(weigh_by_kurtSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_by_gain_pl(prob_pick_by_gain_plSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_by_gain_avg(prob_pick_by_gain_avgSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_by_full_gain(prob_pick_by_full_gainSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_by_dens(prob_pick_by_densSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_col_by_range(prob_pick_col_by_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_col_by_var(prob_pick_col_by_varSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_col_by_kurt(prob_pick_col_by_kurtSEXP);
    Rcpp::traits::input_parameter< double >::type min_gain(min_gainSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type cat_split_type(cat_split_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type new_cat_action(new_cat_actionSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type missing_action(missing_actionSEXP);
    Rcpp::traits::input_parameter< bool >::type all_perm(all_permSEXP);
    Rcpp::traits::input_parameter< bool >::type build_imputer(build_imputerSEXP);
    Rcpp::traits::input_parameter< bool >::type output_imputations(output_imputationsSEXP);
    Rcpp::traits::input_parameter< size_t >::type min_imp_obs(min_imp_obsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type depth_imp(depth_impSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type weigh_imp_rows(weigh_imp_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type random_seed(random_seedSEXP);
    Rcpp::traits::input_parameter< bool >::type use_long_double(use_long_doubleSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_model(X_num, X_cat, ncat, Xc, Xc_ind, Xc_indptr, sample_weights, col_weights, nrows, ncols_numeric, ncols_categ, ndim, ntry, coef_type, coef_by_prop, with_replacement, weight_as_sample, sample_size, ntrees, max_depth, ncols_per_tree, limit_depth, penalize_range, standardize_data, scoring_metric, fast_bratio, calc_dist, standardize_dist, sq_dist, calc_depth, standardize_depth, weigh_by_kurt, prob_pick_by_gain_pl, prob_pick_by_gain_avg, prob_pick_by_full_gain, prob_pick_by_dens, prob_pick_col_by_range, prob_pick_col_by_var, prob_pick_col_by_kurt, min_gain, cat_split_type, new_cat_action, missing_action, all_perm, build_imputer, output_imputations, min_imp_obs, depth_imp, weigh_imp_rows, random_seed, use_long_double, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// fit_tree
void fit_tree(SEXP model_R_ptr, Rcpp::RawVector serialized_obj, Rcpp::RawVector serialized_imputer, SEXP indexer_R_ptr, Rcpp::RawVector serialized_indexer, Rcpp::NumericVector X_num, Rcpp::IntegerVector X_cat, Rcpp::IntegerVector ncat, Rcpp::NumericVector Xc, Rcpp::IntegerVector Xc_ind, Rcpp::IntegerVector Xc_indptr, Rcpp::NumericVector sample_weights, Rcpp::NumericVector col_weights, size_t nrows, size_t ncols_numeric, size_t ncols_categ, size_t ndim, size_t ntry, Rcpp::CharacterVector coef_type, bool coef_by_prop, size_t max_depth, size_t ncols_per_tree, bool limit_depth, bool penalize_range, bool standardize_data, bool fast_bratio, bool weigh_by_kurt, double prob_pick_by_gain_pl, double prob_pick_by_gain_avg, double prob_pick_by_full_gain, double prob_pick_by_dens, double prob_pick_col_by_range, double prob_pick_col_by_var, double prob_pick_col_by_kurt, double min_gain, Rcpp::CharacterVector cat_split_type, Rcpp::CharacterVector new_cat_action, Rcpp::CharacterVector missing_action, bool build_imputer, size_t min_imp_obs, SEXP imp_R_ptr, Rcpp::CharacterVector depth_imp, Rcpp::CharacterVector weigh_imp_rows, bool all_perm, Rcpp::NumericVector ref_X_num, Rcpp::IntegerVector ref_X_cat, Rcpp::NumericVector ref_Xc, Rcpp::IntegerVector ref_Xc_ind, Rcpp::IntegerVector ref_Xc_indptr, uint64_t random_seed, bool use_long_double, Rcpp::List& model_cpp_obj_update, Rcpp::List& model_params_update);
RcppExport SEXP _isotree_fit_tree(SEXP model_R_ptrSEXP, SEXP serialized_objSEXP, SEXP serialized_imputerSEXP, SEXP indexer_R_ptrSEXP, SEXP serialized_indexerSEXP, SEXP X_numSEXP, SEXP X_catSEXP, SEXP ncatSEXP, SEXP XcSEXP, SEXP Xc_indSEXP, SEXP Xc_indptrSEXP, SEXP sample_weightsSEXP, SEXP col_weightsSEXP, SEXP nrowsSEXP, SEXP ncols_numericSEXP, SEXP ncols_categSEXP, SEXP ndimSEXP, SEXP ntrySEXP, SEXP coef_typeSEXP, SEXP coef_by_propSEXP, SEXP max_depthSEXP, SEXP ncols_per_treeSEXP, SEXP limit_depthSEXP, SEXP penalize_rangeSEXP, SEXP standardize_dataSEXP, SEXP fast_bratioSEXP, SEXP weigh_by_kurtSEXP, SEXP prob_pick_by_gain_plSEXP, SEXP prob_pick_by_gain_avgSEXP, SEXP prob_pick_by_full_gainSEXP, SEXP prob_pick_by_densSEXP, SEXP prob_pick_col_by_rangeSEXP, SEXP prob_pick_col_by_varSEXP, SEXP prob_pick_col_by_kurtSEXP, SEXP min_gainSEXP, SEXP cat_split_typeSEXP, SEXP new_cat_actionSEXP, SEXP missing_actionSEXP, SEXP build_imputerSEXP, SEXP min_imp_obsSEXP, SEXP imp_R_ptrSEXP, SEXP depth_impSEXP, SEXP weigh_imp_rowsSEXP, SEXP all_permSEXP, SEXP ref_X_numSEXP, SEXP ref_X_catSEXP, SEXP ref_XcSEXP, SEXP ref_Xc_indSEXP, SEXP ref_Xc_indptrSEXP, SEXP random_seedSEXP, SEXP use_long_doubleSEXP, SEXP model_cpp_obj_updateSEXP, SEXP model_params_updateSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type serialized_obj(serialized_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type serialized_imputer(serialized_imputerSEXP);
    Rcpp::traits::input_parameter< SEXP >::type indexer_R_ptr(indexer_R_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type serialized_indexer(serialized_indexerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_num(X_numSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_cat(X_catSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind(Xc_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr(Xc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sample_weights(sample_weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type col_weights(col_weightsSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncols_numeric(ncols_numericSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncols_categ(ncols_categSEXP);
    Rcpp::traits::input_parameter< size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< size_t >::type ntry(ntrySEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type coef_type(coef_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type coef_by_prop(coef_by_propSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncols_per_tree(ncols_per_treeSEXP);
    Rcpp::traits::input_parameter< bool >::type limit_depth(limit_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type penalize_range(penalize_rangeSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize_data(standardize_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type fast_bratio(fast_bratioSEXP);
    Rcpp::traits::input_parameter< bool >::type weigh_by_kurt(weigh_by_kurtSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_by_gain_pl(prob_pick_by_gain_plSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_by_gain_avg(prob_pick_by_gain_avgSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_by_full_gain(prob_pick_by_full_gainSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_by_dens(prob_pick_by_densSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_col_by_range(prob_pick_col_by_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_col_by_var(prob_pick_col_by_varSEXP);
    Rcpp::traits::input_parameter< double >::type prob_pick_col_by_kurt(prob_pick_col_by_kurtSEXP);
    Rcpp::traits::input_parameter< double >::type min_gain(min_gainSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type cat_split_type(cat_split_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type new_cat_action(new_cat_actionSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type missing_action(missing_actionSEXP);
    Rcpp::traits::input_parameter< bool >::type build_imputer(build_imputerSEXP);
    Rcpp::traits::input_parameter< size_t >::type min_imp_obs(min_imp_obsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type imp_R_ptr(imp_R_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type depth_imp(depth_impSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type weigh_imp_rows(weigh_imp_rowsSEXP);
    Rcpp::traits::input_parameter< bool >::type all_perm(all_permSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ref_X_num(ref_X_numSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ref_X_cat(ref_X_catSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ref_Xc(ref_XcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ref_Xc_ind(ref_Xc_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ref_Xc_indptr(ref_Xc_indptrSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type random_seed(random_seedSEXP);
    Rcpp::traits::input_parameter< bool >::type use_long_double(use_long_doubleSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_cpp_obj_update(model_cpp_obj_updateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_params_update(model_params_updateSEXP);
    fit_tree(model_R_ptr, serialized_obj, serialized_imputer, indexer_R_ptr, serialized_indexer, X_num, X_cat, ncat, Xc, Xc_ind, Xc_indptr, sample_weights, col_weights, nrows, ncols_numeric, ncols_categ, ndim, ntry, coef_type, coef_by_prop, max_depth, ncols_per_tree, limit_depth, penalize_range, standardize_data, fast_bratio, weigh_by_kurt, prob_pick_by_gain_pl, prob_pick_by_gain_avg, prob_pick_by_full_gain, prob_pick_by_dens, prob_pick_col_by_range, prob_pick_col_by_var, prob_pick_col_by_kurt, min_gain, cat_split_type, new_cat_action, missing_action, build_imputer, min_imp_obs, imp_R_ptr, depth_imp, weigh_imp_rows, all_perm, ref_X_num, ref_X_cat, ref_Xc, ref_Xc_ind, ref_Xc_indptr, random_seed, use_long_double, model_cpp_obj_update, model_params_update);
    return R_NilValue;
END_RCPP
}
// predict_iso
void predict_iso(SEXP model_R_ptr, bool is_extended, SEXP indexer_R_ptr, Rcpp::NumericVector outp, Rcpp::IntegerMatrix tree_num, Rcpp::NumericMatrix tree_depths, Rcpp::NumericVector X_num, Rcpp::IntegerVector X_cat, Rcpp::NumericVector Xc, Rcpp::IntegerVector Xc_ind, Rcpp::IntegerVector Xc_indptr, Rcpp::NumericVector Xr, Rcpp::IntegerVector Xr_ind, Rcpp::IntegerVector Xr_indptr, size_t nrows, int nthreads, bool standardize);
RcppExport SEXP _isotree_predict_iso(SEXP model_R_ptrSEXP, SEXP is_extendedSEXP, SEXP indexer_R_ptrSEXP, SEXP outpSEXP, SEXP tree_numSEXP, SEXP tree_depthsSEXP, SEXP X_numSEXP, SEXP X_catSEXP, SEXP XcSEXP, SEXP Xc_indSEXP, SEXP Xc_indptrSEXP, SEXP XrSEXP, SEXP Xr_indSEXP, SEXP Xr_indptrSEXP, SEXP nrowsSEXP, SEXP nthreadsSEXP, SEXP standardizeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type indexer_R_ptr(indexer_R_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type outp(outpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tree_num(tree_numSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type tree_depths(tree_depthsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_num(X_numSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_cat(X_catSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind(Xc_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr(Xc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_ind(Xr_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_indptr(Xr_indptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    predict_iso(model_R_ptr, is_extended, indexer_R_ptr, outp, tree_num, tree_depths, X_num, X_cat, Xc, Xc_ind, Xc_indptr, Xr, Xr_ind, Xr_indptr, nrows, nthreads, standardize);
    return R_NilValue;
END_RCPP
}
// dist_iso
void dist_iso(SEXP model_R_ptr, SEXP indexer_R_ptr, Rcpp::NumericVector tmat, Rcpp::NumericMatrix dmat, Rcpp::NumericMatrix rmat, bool is_extended, Rcpp::NumericVector X_num, Rcpp::IntegerVector X_cat, Rcpp::NumericVector Xc, Rcpp::IntegerVector Xc_ind, Rcpp::IntegerVector Xc_indptr, size_t nrows, bool use_long_double, int nthreads, bool assume_full_distr, bool standardize_dist, bool sq_dist, size_t n_from, bool use_reference_points, bool as_kernel);
RcppExport SEXP _isotree_dist_iso(SEXP model_R_ptrSEXP, SEXP indexer_R_ptrSEXP, SEXP tmatSEXP, SEXP dmatSEXP, SEXP rmatSEXP, SEXP is_extendedSEXP, SEXP X_numSEXP, SEXP X_catSEXP, SEXP XcSEXP, SEXP Xc_indSEXP, SEXP Xc_indptrSEXP, SEXP nrowsSEXP, SEXP use_long_doubleSEXP, SEXP nthreadsSEXP, SEXP assume_full_distrSEXP, SEXP standardize_distSEXP, SEXP sq_distSEXP, SEXP n_fromSEXP, SEXP use_reference_pointsSEXP, SEXP as_kernelSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type indexer_R_ptr(indexer_R_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tmat(tmatSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type rmat(rmatSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_num(X_numSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_cat(X_catSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind(Xc_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr(Xc_indptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_long_double(use_long_doubleSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type assume_full_distr(assume_full_distrSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize_dist(standardize_distSEXP);
    Rcpp::traits::input_parameter< bool >::type sq_dist(sq_distSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_from(n_fromSEXP);
    Rcpp::traits::input_parameter< bool >::type use_reference_points(use_reference_pointsSEXP);
    Rcpp::traits::input_parameter< bool >::type as_kernel(as_kernelSEXP);
    dist_iso(model_R_ptr, indexer_R_ptr, tmat, dmat, rmat, is_extended, X_num, X_cat, Xc, Xc_ind, Xc_indptr, nrows, use_long_double, nthreads, assume_full_distr, standardize_dist, sq_dist, n_from, use_reference_points, as_kernel);
    return R_NilValue;
END_RCPP
}
// impute_iso
Rcpp::List impute_iso(SEXP model_R_ptr, SEXP imputer_R_ptr, bool is_extended, Rcpp::NumericVector X_num, Rcpp::IntegerVector X_cat, Rcpp::NumericVector Xr, Rcpp::IntegerVector Xr_ind, Rcpp::IntegerVector Xr_indptr, size_t nrows, bool use_long_double, int nthreads);
RcppExport SEXP _isotree_impute_iso(SEXP model_R_ptrSEXP, SEXP imputer_R_ptrSEXP, SEXP is_extendedSEXP, SEXP X_numSEXP, SEXP X_catSEXP, SEXP XrSEXP, SEXP Xr_indSEXP, SEXP Xr_indptrSEXP, SEXP nrowsSEXP, SEXP use_long_doubleSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type imputer_R_ptr(imputer_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_num(X_numSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_cat(X_catSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_ind(Xr_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_indptr(Xr_indptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_long_double(use_long_doubleSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_iso(model_R_ptr, imputer_R_ptr, is_extended, X_num, X_cat, Xr, Xr_ind, Xr_indptr, nrows, use_long_double, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// drop_imputer
void drop_imputer(Rcpp::List lst_modify, Rcpp::List lst_modify2);
RcppExport SEXP _isotree_drop_imputer(SEXP lst_modifySEXP, SEXP lst_modify2SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_modify(lst_modifySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_modify2(lst_modify2SEXP);
    drop_imputer(lst_modify, lst_modify2);
    return R_NilValue;
END_RCPP
}
// drop_indexer
void drop_indexer(Rcpp::List lst_modify, Rcpp::List lst_modify2);
RcppExport SEXP _isotree_drop_indexer(SEXP lst_modifySEXP, SEXP lst_modify2SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_modify(lst_modifySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_modify2(lst_modify2SEXP);
    drop_indexer(lst_modify, lst_modify2);
    return R_NilValue;
END_RCPP
}
// drop_reference_points
void drop_reference_points(Rcpp::List lst_modify, Rcpp::List lst_modify2);
RcppExport SEXP _isotree_drop_reference_points(SEXP lst_modifySEXP, SEXP lst_modify2SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_modify(lst_modifySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_modify2(lst_modify2SEXP);
    drop_reference_points(lst_modify, lst_modify2);
    return R_NilValue;
END_RCPP
}
// subset_trees
Rcpp::List subset_trees(SEXP model_R_ptr, SEXP imputer_R_ptr, SEXP indexer_R_ptr, bool is_extended, bool has_imputer, Rcpp::IntegerVector trees_take);
RcppExport SEXP _isotree_subset_trees(SEXP model_R_ptrSEXP, SEXP imputer_R_ptrSEXP, SEXP indexer_R_ptrSEXP, SEXP is_extendedSEXP, SEXP has_imputerSEXP, SEXP trees_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type imputer_R_ptr(imputer_R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type indexer_R_ptr(indexer_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< bool >::type has_imputer(has_imputerSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type trees_take(trees_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_trees(model_R_ptr, imputer_R_ptr, indexer_R_ptr, is_extended, has_imputer, trees_take));
    return rcpp_result_gen;
END_RCPP
}
// inplace_set_to_zero
void inplace_set_to_zero(SEXP obj);
RcppExport SEXP _isotree_inplace_set_to_zero(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    inplace_set_to_zero(obj);
    return R_NilValue;
END_RCPP
}
// get_n_nodes
Rcpp::List get_n_nodes(SEXP model_R_ptr, bool is_extended, int nthreads);
RcppExport SEXP _isotree_get_n_nodes(SEXP model_R_ptrSEXP, SEXP is_extendedSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_n_nodes(model_R_ptr, is_extended, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// append_trees_from_other
void append_trees_from_other(SEXP model_R_ptr, SEXP other_R_ptr, SEXP imp_R_ptr, SEXP oimp_R_ptr, SEXP ind_R_ptr, SEXP oind_R_ptr, bool is_extended, Rcpp::RawVector serialized_obj, Rcpp::RawVector serialized_imputer, Rcpp::RawVector serialized_indexer, Rcpp::List& model_cpp_obj_update, Rcpp::List& model_params_update);
RcppExport SEXP _isotree_append_trees_from_other(SEXP model_R_ptrSEXP, SEXP other_R_ptrSEXP, SEXP imp_R_ptrSEXP, SEXP oimp_R_ptrSEXP, SEXP ind_R_ptrSEXP, SEXP oind_R_ptrSEXP, SEXP is_extendedSEXP, SEXP serialized_objSEXP, SEXP serialized_imputerSEXP, SEXP serialized_indexerSEXP, SEXP model_cpp_obj_updateSEXP, SEXP model_params_updateSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other_R_ptr(other_R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type imp_R_ptr(imp_R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type oimp_R_ptr(oimp_R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ind_R_ptr(ind_R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type oind_R_ptr(oind_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type serialized_obj(serialized_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type serialized_imputer(serialized_imputerSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type serialized_indexer(serialized_indexerSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_cpp_obj_update(model_cpp_obj_updateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_params_update(model_params_updateSEXP);
    append_trees_from_other(model_R_ptr, other_R_ptr, imp_R_ptr, oimp_R_ptr, ind_R_ptr, oind_R_ptr, is_extended, serialized_obj, serialized_imputer, serialized_indexer, model_cpp_obj_update, model_params_update);
    return R_NilValue;
END_RCPP
}
// model_to_sql
Rcpp::ListOf<Rcpp::CharacterVector> model_to_sql(SEXP model_R_ptr, bool is_extended, Rcpp::CharacterVector numeric_colanmes, Rcpp::CharacterVector categ_colnames, Rcpp::ListOf<Rcpp::CharacterVector> categ_levels, bool output_tree_num, bool single_tree, size_t tree_num, int nthreads);
RcppExport SEXP _isotree_model_to_sql(SEXP model_R_ptrSEXP, SEXP is_extendedSEXP, SEXP numeric_colanmesSEXP, SEXP categ_colnamesSEXP, SEXP categ_levelsSEXP, SEXP output_tree_numSEXP, SEXP single_treeSEXP, SEXP tree_numSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type numeric_colanmes(numeric_colanmesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type categ_colnames(categ_colnamesSEXP);
    Rcpp::traits::input_parameter< Rcpp::ListOf<Rcpp::CharacterVector> >::type categ_levels(categ_levelsSEXP);
    Rcpp::traits::input_parameter< bool >::type output_tree_num(output_tree_numSEXP);
    Rcpp::traits::input_parameter< bool >::type single_tree(single_treeSEXP);
    Rcpp::traits::input_parameter< size_t >::type tree_num(tree_numSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(model_to_sql(model_R_ptr, is_extended, numeric_colanmes, categ_colnames, categ_levels, output_tree_num, single_tree, tree_num, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// model_to_sql_with_select_from
Rcpp::CharacterVector model_to_sql_with_select_from(SEXP model_R_ptr, bool is_extended, Rcpp::CharacterVector numeric_colanmes, Rcpp::CharacterVector categ_colnames, Rcpp::ListOf<Rcpp::CharacterVector> categ_levels, Rcpp::CharacterVector table_from, Rcpp::CharacterVector select_as, int nthreads);
RcppExport SEXP _isotree_model_to_sql_with_select_from(SEXP model_R_ptrSEXP, SEXP is_extendedSEXP, SEXP numeric_colanmesSEXP, SEXP categ_colnamesSEXP, SEXP categ_levelsSEXP, SEXP table_fromSEXP, SEXP select_asSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type numeric_colanmes(numeric_colanmesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type categ_colnames(categ_colnamesSEXP);
    Rcpp::traits::input_parameter< Rcpp::ListOf<Rcpp::CharacterVector> >::type categ_levels(categ_levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type table_from(table_fromSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type select_as(select_asSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(model_to_sql_with_select_from(model_R_ptr, is_extended, numeric_colanmes, categ_colnames, categ_levels, table_from, select_as, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// copy_cpp_objects
Rcpp::List copy_cpp_objects(SEXP model_R_ptr, bool is_extended, SEXP imp_R_ptr, bool has_imputer, SEXP ind_R_ptr);
RcppExport SEXP _isotree_copy_cpp_objects(SEXP model_R_ptrSEXP, SEXP is_extendedSEXP, SEXP imp_R_ptrSEXP, SEXP has_imputerSEXP, SEXP ind_R_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type imp_R_ptr(imp_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type has_imputer(has_imputerSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ind_R_ptr(ind_R_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_cpp_objects(model_R_ptr, is_extended, imp_R_ptr, has_imputer, ind_R_ptr));
    return rcpp_result_gen;
END_RCPP
}
// build_tree_indices
void build_tree_indices(Rcpp::List lst_modify, bool is_extended, bool with_distances, int nthreads);
RcppExport SEXP _isotree_build_tree_indices(SEXP lst_modifySEXP, SEXP is_extendedSEXP, SEXP with_distancesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_modify(lst_modifySEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< bool >::type with_distances(with_distancesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    build_tree_indices(lst_modify, is_extended, with_distances, nthreads);
    return R_NilValue;
END_RCPP
}
// check_node_indexer_has_distances
bool check_node_indexer_has_distances(SEXP indexer_R_ptr);
RcppExport SEXP _isotree_check_node_indexer_has_distances(SEXP indexer_R_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type indexer_R_ptr(indexer_R_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(check_node_indexer_has_distances(indexer_R_ptr));
    return rcpp_result_gen;
END_RCPP
}
// set_reference_points
void set_reference_points(Rcpp::List lst_modify, Rcpp::List lst_modify2, SEXP rnames, bool is_extended, Rcpp::NumericVector X_num, Rcpp::IntegerVector X_cat, Rcpp::NumericVector Xc, Rcpp::IntegerVector Xc_ind, Rcpp::IntegerVector Xc_indptr, size_t nrows, int nthreads, bool with_distances);
RcppExport SEXP _isotree_set_reference_points(SEXP lst_modifySEXP, SEXP lst_modify2SEXP, SEXP rnamesSEXP, SEXP is_extendedSEXP, SEXP X_numSEXP, SEXP X_catSEXP, SEXP XcSEXP, SEXP Xc_indSEXP, SEXP Xc_indptrSEXP, SEXP nrowsSEXP, SEXP nthreadsSEXP, SEXP with_distancesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_modify(lst_modifySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_modify2(lst_modify2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type rnames(rnamesSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_num(X_numSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_cat(X_catSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind(Xc_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr(Xc_indptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type with_distances(with_distancesSEXP);
    set_reference_points(lst_modify, lst_modify2, rnames, is_extended, X_num, X_cat, Xc, Xc_ind, Xc_indptr, nrows, nthreads, with_distances);
    return R_NilValue;
END_RCPP
}
// check_node_indexer_has_references
bool check_node_indexer_has_references(SEXP indexer_R_ptr);
RcppExport SEXP _isotree_check_node_indexer_has_references(SEXP indexer_R_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type indexer_R_ptr(indexer_R_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(check_node_indexer_has_references(indexer_R_ptr));
    return rcpp_result_gen;
END_RCPP
}
// get_num_references
int get_num_references(SEXP indexer_R_ptr);
RcppExport SEXP _isotree_get_num_references(SEXP indexer_R_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type indexer_R_ptr(indexer_R_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_num_references(indexer_R_ptr));
    return rcpp_result_gen;
END_RCPP
}
// get_null_R_pointer
SEXP get_null_R_pointer();
RcppExport SEXP _isotree_get_null_R_pointer() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(get_null_R_pointer());
    return rcpp_result_gen;
END_RCPP
}
// serialize_to_file
void serialize_to_file(Rcpp::RawVector serialized_obj, Rcpp::RawVector serialized_imputer, Rcpp::RawVector serialized_indexer, bool is_extended, Rcpp::RawVector metadata, Rcpp::CharacterVector fname);
RcppExport SEXP _isotree_serialize_to_file(SEXP serialized_objSEXP, SEXP serialized_imputerSEXP, SEXP serialized_indexerSEXP, SEXP is_extendedSEXP, SEXP metadataSEXP, SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type serialized_obj(serialized_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type serialized_imputer(serialized_imputerSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type serialized_indexer(serialized_indexerSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type metadata(metadataSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type fname(fnameSEXP);
    serialize_to_file(serialized_obj, serialized_imputer, serialized_indexer, is_extended, metadata, fname);
    return R_NilValue;
END_RCPP
}
// deserialize_from_file
Rcpp::List deserialize_from_file(Rcpp::CharacterVector fname);
RcppExport SEXP _isotree_deserialize_from_file(SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type fname(fnameSEXP);
    rcpp_result_gen = Rcpp::wrap(deserialize_from_file(fname));
    return rcpp_result_gen;
END_RCPP
}
// call_sort_csc_indices
void call_sort_csc_indices(Rcpp::NumericVector Xc, Rcpp::IntegerVector Xc_ind, Rcpp::IntegerVector Xc_indptr);
RcppExport SEXP _isotree_call_sort_csc_indices(SEXP XcSEXP, SEXP Xc_indSEXP, SEXP Xc_indptrSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind(Xc_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr(Xc_indptrSEXP);
    call_sort_csc_indices(Xc, Xc_ind, Xc_indptr);
    return R_NilValue;
END_RCPP
}
// call_reconstruct_csr_sliced
void call_reconstruct_csr_sliced(Rcpp::NumericVector orig_Xr, Rcpp::IntegerVector orig_Xr_indptr, Rcpp::NumericVector rec_Xr, Rcpp::IntegerVector rec_Xr_indptr, size_t nrows);
RcppExport SEXP _isotree_call_reconstruct_csr_sliced(SEXP orig_XrSEXP, SEXP orig_Xr_indptrSEXP, SEXP rec_XrSEXP, SEXP rec_Xr_indptrSEXP, SEXP nrowsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type orig_Xr(orig_XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type orig_Xr_indptr(orig_Xr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rec_Xr(rec_XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rec_Xr_indptr(rec_Xr_indptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    call_reconstruct_csr_sliced(orig_Xr, orig_Xr_indptr, rec_Xr, rec_Xr_indptr, nrows);
    return R_NilValue;
END_RCPP
}
// call_reconstruct_csr_with_categ
void call_reconstruct_csr_with_categ(Rcpp::NumericVector orig_Xr, Rcpp::IntegerVector orig_Xr_ind, Rcpp::IntegerVector orig_Xr_indptr, Rcpp::NumericVector rec_Xr, Rcpp::IntegerVector rec_Xr_ind, Rcpp::IntegerVector rec_Xr_indptr, Rcpp::IntegerVector rec_X_cat, Rcpp::IntegerVector cols_numeric, Rcpp::IntegerVector cols_categ, size_t nrows, size_t ncols);
RcppExport SEXP _isotree_call_reconstruct_csr_with_categ(SEXP orig_XrSEXP, SEXP orig_Xr_indSEXP, SEXP orig_Xr_indptrSEXP, SEXP rec_XrSEXP, SEXP rec_Xr_indSEXP, SEXP rec_Xr_indptrSEXP, SEXP rec_X_catSEXP, SEXP cols_numericSEXP, SEXP cols_categSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type orig_Xr(orig_XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type orig_Xr_ind(orig_Xr_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type orig_Xr_indptr(orig_Xr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rec_Xr(rec_XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rec_Xr_ind(rec_Xr_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rec_Xr_indptr(rec_Xr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rec_X_cat(rec_X_catSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_numeric(cols_numericSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_categ(cols_categSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncols(ncolsSEXP);
    call_reconstruct_csr_with_categ(orig_Xr, orig_Xr_ind, orig_Xr_indptr, rec_Xr, rec_Xr_ind, rec_Xr_indptr, rec_X_cat, cols_numeric, cols_categ, nrows, ncols);
    return R_NilValue;
END_RCPP
}
// deepcopy_vector
Rcpp::NumericVector deepcopy_vector(Rcpp::NumericVector inp);
RcppExport SEXP _isotree_deepcopy_vector(SEXP inpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type inp(inpSEXP);
    rcpp_result_gen = Rcpp::wrap(deepcopy_vector(inp));
    return rcpp_result_gen;
END_RCPP
}
// call_take_cols_by_slice_csr
Rcpp::List call_take_cols_by_slice_csr(Rcpp::NumericVector Xr_, Rcpp::IntegerVector Xr_ind_, Rcpp::IntegerVector Xr_indptr, int ncols_take, bool as_dense);
RcppExport SEXP _isotree_call_take_cols_by_slice_csr(SEXP Xr_SEXP, SEXP Xr_ind_SEXP, SEXP Xr_indptrSEXP, SEXP ncols_takeSEXP, SEXP as_denseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xr_(Xr_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_ind_(Xr_ind_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_indptr(Xr_indptrSEXP);
    Rcpp::traits::input_parameter< int >::type ncols_take(ncols_takeSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dense(as_denseSEXP);
    rcpp_result_gen = Rcpp::wrap(call_take_cols_by_slice_csr(Xr_, Xr_ind_, Xr_indptr, ncols_take, as_dense));
    return rcpp_result_gen;
END_RCPP
}
// call_take_cols_by_index_csr
Rcpp::List call_take_cols_by_index_csr(Rcpp::NumericVector Xr, Rcpp::IntegerVector Xr_ind, Rcpp::IntegerVector Xr_indptr, Rcpp::IntegerVector cols_take, bool as_dense);
RcppExport SEXP _isotree_call_take_cols_by_index_csr(SEXP XrSEXP, SEXP Xr_indSEXP, SEXP Xr_indptrSEXP, SEXP cols_takeSEXP, SEXP as_denseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_ind(Xr_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_indptr(Xr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dense(as_denseSEXP);
    rcpp_result_gen = Rcpp::wrap(call_take_cols_by_index_csr(Xr, Xr_ind, Xr_indptr, cols_take, as_dense));
    return rcpp_result_gen;
END_RCPP
}
// call_take_cols_by_slice_csc
Rcpp::List call_take_cols_by_slice_csc(Rcpp::NumericVector Xc, Rcpp::IntegerVector Xc_ind, Rcpp::IntegerVector Xc_indptr, size_t ncols_take, bool as_dense, size_t nrows);
RcppExport SEXP _isotree_call_take_cols_by_slice_csc(SEXP XcSEXP, SEXP Xc_indSEXP, SEXP Xc_indptrSEXP, SEXP ncols_takeSEXP, SEXP as_denseSEXP, SEXP nrowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind(Xc_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr(Xc_indptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncols_take(ncols_takeSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dense(as_denseSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    rcpp_result_gen = Rcpp::wrap(call_take_cols_by_slice_csc(Xc, Xc_ind, Xc_indptr, ncols_take, as_dense, nrows));
    return rcpp_result_gen;
END_RCPP
}
// call_take_cols_by_index_csc
Rcpp::List call_take_cols_by_index_csc(Rcpp::NumericVector Xc_, Rcpp::IntegerVector Xc_ind_, Rcpp::IntegerVector Xc_indptr, Rcpp::IntegerVector cols_take, bool as_dense, size_t nrows);
RcppExport SEXP _isotree_call_take_cols_by_index_csc(SEXP Xc_SEXP, SEXP Xc_ind_SEXP, SEXP Xc_indptrSEXP, SEXP cols_takeSEXP, SEXP as_denseSEXP, SEXP nrowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc_(Xc_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind_(Xc_ind_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr(Xc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dense(as_denseSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    rcpp_result_gen = Rcpp::wrap(call_take_cols_by_index_csc(Xc_, Xc_ind_, Xc_indptr, cols_take, as_dense, nrows));
    return rcpp_result_gen;
END_RCPP
}
// copy_csc_cols_by_slice
void copy_csc_cols_by_slice(Rcpp::NumericVector out_Xc_, Rcpp::IntegerVector out_Xc_indptr, Rcpp::NumericVector from_Xc_, Rcpp::IntegerVector from_Xc_indptr, size_t n_copy);
RcppExport SEXP _isotree_copy_csc_cols_by_slice(SEXP out_Xc_SEXP, SEXP out_Xc_indptrSEXP, SEXP from_Xc_SEXP, SEXP from_Xc_indptrSEXP, SEXP n_copySEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type out_Xc_(out_Xc_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type out_Xc_indptr(out_Xc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type from_Xc_(from_Xc_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type from_Xc_indptr(from_Xc_indptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_copy(n_copySEXP);
    copy_csc_cols_by_slice(out_Xc_, out_Xc_indptr, from_Xc_, from_Xc_indptr, n_copy);
    return R_NilValue;
END_RCPP
}
// copy_csc_cols_by_index
void copy_csc_cols_by_index(Rcpp::NumericVector out_Xc_, Rcpp::IntegerVector out_Xc_indptr, Rcpp::NumericVector from_Xc_, Rcpp::IntegerVector from_Xc_indptr, Rcpp::IntegerVector cols_copy);
RcppExport SEXP _isotree_copy_csc_cols_by_index(SEXP out_Xc_SEXP, SEXP out_Xc_indptrSEXP, SEXP from_Xc_SEXP, SEXP from_Xc_indptrSEXP, SEXP cols_copySEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type out_Xc_(out_Xc_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type out_Xc_indptr(out_Xc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type from_Xc_(from_Xc_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type from_Xc_indptr(from_Xc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_copy(cols_copySEXP);
    copy_csc_cols_by_index(out_Xc_, out_Xc_indptr, from_Xc_, from_Xc_indptr, cols_copy);
    return R_NilValue;
END_RCPP
}
// assign_csc_cols
Rcpp::List assign_csc_cols(Rcpp::NumericVector Xc_, Rcpp::IntegerVector Xc_ind_, Rcpp::IntegerVector Xc_indptr, Rcpp::IntegerVector X_cat_, Rcpp::IntegerVector cols_categ, Rcpp::IntegerVector cols_numeric, size_t nrows);
RcppExport SEXP _isotree_assign_csc_cols(SEXP Xc_SEXP, SEXP Xc_ind_SEXP, SEXP Xc_indptrSEXP, SEXP X_cat_SEXP, SEXP cols_categSEXP, SEXP cols_numericSEXP, SEXP nrowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc_(Xc_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind_(Xc_ind_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr(Xc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_cat_(X_cat_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_categ(cols_categSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_numeric(cols_numericSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_csc_cols(Xc_, Xc_ind_, Xc_indptr, X_cat_, cols_categ, cols_numeric, nrows));
    return rcpp_result_gen;
END_RCPP
}
// get_empty_tmat
Rcpp::NumericVector get_empty_tmat(int nrows_);
RcppExport SEXP _isotree_get_empty_tmat(SEXP nrows_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type nrows_(nrows_SEXP);
    rcpp_result_gen = Rcpp::wrap(get_empty_tmat(nrows_));
    return rcpp_result_gen;
END_RCPP
}
// get_empty_int_mat
Rcpp::IntegerMatrix get_empty_int_mat(int nrows, int ncols);
RcppExport SEXP _isotree_get_empty_int_mat(SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_empty_int_mat(nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// get_null_int_mat
Rcpp::IntegerMatrix get_null_int_mat();
RcppExport SEXP _isotree_get_null_int_mat() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(get_null_int_mat());
    return rcpp_result_gen;
END_RCPP
}
// get_ntrees
int get_ntrees(SEXP model_R_ptr, bool is_extended);
RcppExport SEXP _isotree_get_ntrees(SEXP model_R_ptrSEXP, SEXP is_extendedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_R_ptr(model_R_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_extended(is_extendedSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ntrees(model_R_ptr, is_extended));
    return rcpp_result_gen;
END_RCPP
}
// deepcopy_int
SEXP deepcopy_int(SEXP x);
RcppExport SEXP _isotree_deepcopy_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepcopy_int(x));
    return rcpp_result_gen;
END_RCPP
}
// modify_R_list_inplace
void modify_R_list_inplace(SEXP lst, int ix, SEXP el);
RcppExport SEXP _isotree_modify_R_list_inplace(SEXP lstSEXP, SEXP ixSEXP, SEXP elSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type lst(lstSEXP);
    Rcpp::traits::input_parameter< int >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< SEXP >::type el(elSEXP);
    modify_R_list_inplace(lst, ix, el);
    return R_NilValue;
END_RCPP
}
// addto_R_list_inplace
void addto_R_list_inplace(Rcpp::List& lst, Rcpp::String nm, SEXP el);
RcppExport SEXP _isotree_addto_R_list_inplace(SEXP lstSEXP, SEXP nmSEXP, SEXP elSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List& >::type lst(lstSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type nm(nmSEXP);
    Rcpp::traits::input_parameter< SEXP >::type el(elSEXP);
    addto_R_list_inplace(lst, nm, el);
    return R_NilValue;
END_RCPP
}
// R_has_openmp
bool R_has_openmp();
RcppExport SEXP _isotree_R_has_openmp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(R_has_openmp());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_isotree_deserialize_IsoForest", (DL_FUNC) &_isotree_deserialize_IsoForest, 1},
    {"_isotree_deserialize_ExtIsoForest", (DL_FUNC) &_isotree_deserialize_ExtIsoForest, 1},
    {"_isotree_deserialize_Imputer", (DL_FUNC) &_isotree_deserialize_Imputer, 1},
    {"_isotree_deserialize_Indexer", (DL_FUNC) &_isotree_deserialize_Indexer, 1},
    {"_isotree_check_null_ptr_model", (DL_FUNC) &_isotree_check_null_ptr_model, 1},
    {"_isotree_fit_model", (DL_FUNC) &_isotree_fit_model, 52},
    {"_isotree_fit_tree", (DL_FUNC) &_isotree_fit_tree, 53},
    {"_isotree_predict_iso", (DL_FUNC) &_isotree_predict_iso, 17},
    {"_isotree_dist_iso", (DL_FUNC) &_isotree_dist_iso, 20},
    {"_isotree_impute_iso", (DL_FUNC) &_isotree_impute_iso, 11},
    {"_isotree_drop_imputer", (DL_FUNC) &_isotree_drop_imputer, 2},
    {"_isotree_drop_indexer", (DL_FUNC) &_isotree_drop_indexer, 2},
    {"_isotree_drop_reference_points", (DL_FUNC) &_isotree_drop_reference_points, 2},
    {"_isotree_subset_trees", (DL_FUNC) &_isotree_subset_trees, 6},
    {"_isotree_inplace_set_to_zero", (DL_FUNC) &_isotree_inplace_set_to_zero, 1},
    {"_isotree_get_n_nodes", (DL_FUNC) &_isotree_get_n_nodes, 3},
    {"_isotree_append_trees_from_other", (DL_FUNC) &_isotree_append_trees_from_other, 12},
    {"_isotree_model_to_sql", (DL_FUNC) &_isotree_model_to_sql, 9},
    {"_isotree_model_to_sql_with_select_from", (DL_FUNC) &_isotree_model_to_sql_with_select_from, 8},
    {"_isotree_copy_cpp_objects", (DL_FUNC) &_isotree_copy_cpp_objects, 5},
    {"_isotree_build_tree_indices", (DL_FUNC) &_isotree_build_tree_indices, 4},
    {"_isotree_check_node_indexer_has_distances", (DL_FUNC) &_isotree_check_node_indexer_has_distances, 1},
    {"_isotree_set_reference_points", (DL_FUNC) &_isotree_set_reference_points, 12},
    {"_isotree_check_node_indexer_has_references", (DL_FUNC) &_isotree_check_node_indexer_has_references, 1},
    {"_isotree_get_num_references", (DL_FUNC) &_isotree_get_num_references, 1},
    {"_isotree_get_null_R_pointer", (DL_FUNC) &_isotree_get_null_R_pointer, 0},
    {"_isotree_serialize_to_file", (DL_FUNC) &_isotree_serialize_to_file, 6},
    {"_isotree_deserialize_from_file", (DL_FUNC) &_isotree_deserialize_from_file, 1},
    {"_isotree_call_sort_csc_indices", (DL_FUNC) &_isotree_call_sort_csc_indices, 3},
    {"_isotree_call_reconstruct_csr_sliced", (DL_FUNC) &_isotree_call_reconstruct_csr_sliced, 5},
    {"_isotree_call_reconstruct_csr_with_categ", (DL_FUNC) &_isotree_call_reconstruct_csr_with_categ, 11},
    {"_isotree_deepcopy_vector", (DL_FUNC) &_isotree_deepcopy_vector, 1},
    {"_isotree_call_take_cols_by_slice_csr", (DL_FUNC) &_isotree_call_take_cols_by_slice_csr, 5},
    {"_isotree_call_take_cols_by_index_csr", (DL_FUNC) &_isotree_call_take_cols_by_index_csr, 5},
    {"_isotree_call_take_cols_by_slice_csc", (DL_FUNC) &_isotree_call_take_cols_by_slice_csc, 6},
    {"_isotree_call_take_cols_by_index_csc", (DL_FUNC) &_isotree_call_take_cols_by_index_csc, 6},
    {"_isotree_copy_csc_cols_by_slice", (DL_FUNC) &_isotree_copy_csc_cols_by_slice, 5},
    {"_isotree_copy_csc_cols_by_index", (DL_FUNC) &_isotree_copy_csc_cols_by_index, 5},
    {"_isotree_assign_csc_cols", (DL_FUNC) &_isotree_assign_csc_cols, 7},
    {"_isotree_get_empty_tmat", (DL_FUNC) &_isotree_get_empty_tmat, 1},
    {"_isotree_get_empty_int_mat", (DL_FUNC) &_isotree_get_empty_int_mat, 2},
    {"_isotree_get_null_int_mat", (DL_FUNC) &_isotree_get_null_int_mat, 0},
    {"_isotree_get_ntrees", (DL_FUNC) &_isotree_get_ntrees, 2},
    {"_isotree_deepcopy_int", (DL_FUNC) &_isotree_deepcopy_int, 1},
    {"_isotree_modify_R_list_inplace", (DL_FUNC) &_isotree_modify_R_list_inplace, 3},
    {"_isotree_addto_R_list_inplace", (DL_FUNC) &_isotree_addto_R_list_inplace, 3},
    {"_isotree_R_has_openmp", (DL_FUNC) &_isotree_R_has_openmp, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_isotree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
